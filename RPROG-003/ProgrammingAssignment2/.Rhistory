install.packages("psych")
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
library("psych")
install.packages("tseries")
install.packages("TSA")
library("TSA")
detach("package:tseries")
detach("package:tseries")
detach("package:tseries")
detach("package:TSA")
library("TSA")
detach("package:TSA")
detach("package:tseries")
library("TSA")
library("boot")
install.packages("mvtnorm")
library("mvtnorm")
install.packages("fPortfolio")
library("fPortfolio")
install.packages(c("KernSmooth", "MASS", "Matrix", "boot", "class", "lattice", "mgcv", "nnet", "rpart", "spatial"))
R.version()
R.Version()
Version()
version()
install.packages(c("akima", "boot", "class", "cluster", "fAssets", "fBasics", "fCopulae", "foreign", "KernSmooth", "lattice", "locfit", "MASS", "mgcv", "mnormt", "mvtnorm", "nlme", "nnet", "PerformanceAnalytics", "psych", "quadprog", "Rglpk", "robustbase", "rpart", "slam", "spatial", "stabledist", "survival", "timeDate", "timeSeries", "TSA", "tseries", "xts", "zoo"))
package(gbm)
version()
r.version()
r.version
version
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
version()
r.version()
version()
version
version
clear
cls
clear()
Ver = version
Ver.version_string
Ver
Ver.version.string
class(Ver)
str(Ver)
Ver$version.string
Ver = version
Ver$version.string
rm(Ver)
survey <- download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", method=curl)
getwd()
install.packages("swirl")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Nitin")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(c(1, 2, 3), c("X", "Y", "Z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData==NA
sum(myNA)
myData
0/0
Inf/Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c('foo', 'bar', 'norf')
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(myMatrix, myMatrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients,myMatrix)
myData
class(myData)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(myData) <- cnames
myData
bye()
swirl()
arguments(mean)
argument(mean)
function(mean)
รง
exit
par("pch")
par
args(par)
str(par)
class(par)
with(airquality, plot(Wind,Ozone))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
dev.cur()
dev()
library(datasets)
data(iris)
?iris
iris
?tapply
?split
iris_by_species <- split(iris, iris$Species)
?lapply
iris_by_species[1]$Sepal.Length
iris_by_species[[1]]$Sepal.Length
iris_by_species$Sepal.Length
iris_by_species
apply(iris_by_species$virginica, 2, mean)
virginica <- iris_by_species$virginica
apply(virginica$Sepal.Length, mean)
apply(virginica$Sepal.Length, 1, mean)
apply(virginica$Sepal.Length, 2, mean)
tapply(virginica$Sepal.Length, 2, mean)
tapply(virginica$Sepal.Length, 1, mean)
lapply(virginica$Sepal.Length, mean)
lapply(virginica[["Sepal.Length"]], mean)
virginica
virginica["Sepal.Length"]
lapply(virginica["Sepal.Length"], mean)
tapply(virginica, 2, mean)
apply(virginica, 2, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mtcars
mtcars$mpg
mtcars$cyl
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
avg_hp <- sapply(split(mtcars$hp, mtcars$cyl), mean)
avg_hp[3]-avg_hp[1]
ls()
debug(ls)
ls()
exit()
exit
quit
quit()
setwd("~/Dev/Coursera/DataScience/RPROG-003/ProgrammingAssignment2")
ls()
dir()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
class(makeVector)
makeVector(c(1:10))
mv <- makeVector(c(1:10))
str(mv)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(mv)
cachemean(mv)
cachemean(mv)
mv <- makeVector(c(1:10))
cachemean(mv)
I
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setMatrixInverse <- function(mtrx) inv <<- mtrx
getMatrixInverse <- function() inv
list(set = set, get = get,
setMatrixInverse = setMatrixInverse,
getMatrixInverse = getMatrixInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getMatrixInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setMatrixInverse(inv)
inv
}
m <- matrix(c(1:4), 2, 2)
m
mcm <- makeCacheMatrix(m)
cacheSolve(mcm)
cacheSolve(mcm)
solve(m)
m <- matrix(c(1, 0, 0, 1), 2, 2)
m
solve(m)
mcm <- makeCacheMatrix(m)
cacheSolve(mcm)
cacheSolve(mcm)
m <- matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), 3, 3)
m
solve(m)
mcm <- makeCacheMatrix(m)
cacheSolve(mcm)
cacheSolve(mcm)
cacheSolve(mcm)
